{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///index.umd.min.js","webpack:///webpack/bootstrap 7deaf8f2a81962280474","webpack:///./index.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_codeForHangul","h","charCodeAt","_codeForZeros","zs","n","length","Error","_codeForDigit","d","_codeForEnglish","e","test","_codeForEnglishInitial","toLowerCase","code","word","w","replace","last","zerosMatch","exec","slice","hasJongseong"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,UAAAD,IAEAD,EAAA,UAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD,GAEtB,YElBD,IAAMe,GAAiB,SAAAC,GAAA,OACpBA,EAAEC,WAAW,GAAK,OAAS,IAgBxBC,EAAgB,SAAAC,GACpB,GAAMC,GAAID,EAAGE,MAEb,IAAU,IAAND,EACF,MAAO,GAET,IAAU,IAANA,GAAYA,GAAK,GAAKA,GAAK,GAC7B,MAAO,EAET,IAAIA,GAAK,GAAKA,GAAK,EACjB,MAAO,EAET,IAAKA,GAAK,IAAMA,GAAK,IAAQA,GAAK,IAAMA,GAAK,GAC3C,MAAO,EAET,IAAIA,GAAK,IAAMA,GAAK,GAClB,MAAO,GAGT,MAAM,IAAIE,OAAM,oBAMZC,EAAgB,SAAAC,GAAA,OACnB,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGA,IAK7BC,EAAkB,SAAAC,GAAA,MACpB,MAAMC,KAAKD,GAAK,EAChB,MAAMC,KAAKD,GAAK,EAChB,MAAMC,KAAKD,GAAK,EAChB,MAAMC,KAAKD,GAAK,EAChB,MAAMC,KAAKD,GAAK,EAChB,MAAMC,KAAKD,GAAK,GAChB,MAAMC,KAAKD,GAAK,GAChB,MAAMC,KAAKD,GAAK,GAChB,MAAMC,KAAKD,GAAK,GAChB,MAAMC,KAAKD,GAAK,GACA,GAKdE,EAAyB,SAAAF,GAC7B,OAAQA,EAAEG,eACR,IAAK,IACL,IAAK,IACH,MAAO,EACT,KAAK,IACH,MAAO,GACT,KAAK,IACH,MAAO,EACT,SACE,MAAO,KAOPC,EAAO,QAAPA,GAAOC,GACX,IAAKA,EACH,MAAO,EAIT,IAAMC,GAAID,EAAKE,QAAQ,aAAc,IAC/BC,EAAOF,EAAEA,EAAEX,OAAS,EAE1B,IAAI,QAAQM,KAAKO,GACf,MAAOnB,GAAemB,EAGxB,IAAI,WAAWP,KAAKK,GAAI,CACtB,GAAMG,GAAa,MAAMC,KAAKJ,EAE9B,OAAOd,GAAciB,EAAW,IAGlC,MAAI,KAAKR,KAAKO,GACLX,EAAcW,GAGnB,aAAaP,KAAKK,GACbP,EAAgBO,EAAEK,MAAML,EAAEX,OAAS,EAAGW,EAAEX,SAG7C,sBAAsBM,KAAKK,GACtBJ,EAAuBM,GAG5B,2BAA2BP,KAAKK,GAC3BJ,EAAuBI,EAAEA,EAAEX,OAAS,IAGtCS,EAAKE,EAAEK,MAAM,EAAGL,EAAEX,OAAS,KAK9BiB,EAAe,SAAAN,GAAA,MACP,KAAZF,EAAKE,GAEP/B,GAAOD,SACLe,iBACAG,gBACAK,gBACAE,kBACAG,yBACAE,OACAQ","file":"index.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jongseong\"] = factory();\n\telse\n\t\troot[\"jongseong\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jongseong\"] = factory();\n\telse\n\t\troot[\"jongseong\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t// A JongseongCode is an integer[0...27].\n\t//   - Each code represents a tail consonants.\n\t//     code  |  e.g.\n\t//    -------+------\n\t//       0   |   가\n\t//       1   |   각\n\t//       2   |   갂\n\t//       3   |   갃\n\t//       4   |   간\n\t//       5   |   갅\n\t//       6   |   갆\n\t//       7   |   갇\n\t//       8   |   갈\n\t//       9   |   갉\n\t//      10   |   갊\n\t//      11   |   갋\n\t//      12   |   갌\n\t//      13   |   갍\n\t//      14   |   갎\n\t//      15   |   갏\n\t//      16   |   감\n\t//      17   |   갑\n\t//      18   |   값\n\t//      19   |   갓\n\t//      20   |   갔\n\t//      21   |   강\n\t//      22   |   갖\n\t//      23   |   갗\n\t//      24   |   갘\n\t//      25   |   같\n\t//      26   |   갚\n\t//      27   |   갛\n\t\n\t// _codeForHangul :: string -> JongseongCode\n\t// Given a Hangul letter, computes its jongseong code.\n\t// Assume h is a single letter Hangul string (가-힣).\n\t//   - 44032 (AC00) is the code point of 가, which is the first Hangul letter.\n\t//   - 28 = the number of the jongseongs + 1\n\tvar _codeForHangul = function _codeForHangul(h) {\n\t  return (h.charCodeAt(0) - 44032) % 28;\n\t};\n\t\n\t// code :: string -> JongseongCode\n\t// Given a string of zeros, returns its jongseong code.\n\t// e.g. _codeForZeros('00') === 1    (100 = 백)\n\t//   the number |\n\t//   of zeros   |\n\t//   -----------+-------\n\t//       1      |  십\n\t//       2      |  백\n\t//       3      |  천\n\t//     4 ~ 7    |  만\n\t//     8 ~ 11   |  억\n\t//    12 ~ 15   |  조\n\t//    16 ~ 19   |  경\n\t//    20 ~ 23   |  해\n\tvar _codeForZeros = function _codeForZeros(zs) {\n\t  var n = zs.length;\n\t\n\t  if (n === 1) {\n\t    return 17;\n\t  }\n\t  if (n === 2 || n >= 8 && n <= 11) {\n\t    return 1;\n\t  }\n\t  if (n >= 3 && n <= 7) {\n\t    return 4;\n\t  }\n\t  if (n >= 12 && n <= 15 || n >= 20 && n <= 23) {\n\t    return 0;\n\t  }\n\t  if (n >= 16 && n <= 19) {\n\t    return 21;\n\t  }\n\t\n\t  throw new Error(\"It's too large.\");\n\t};\n\t\n\t// _codeForDigit :: string -> JongseongCode\n\t// Given a digit, returns its jongseong code.\n\t// Assume d is one of: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'\n\tvar _codeForDigit = function _codeForDigit(d) {\n\t  return [21, 8, 0, 16, 0, 0, 1, 8, 8, 0][d];\n\t};\n\t\n\t// _codeForEnglish :: string -> JongseongCode\n\t// Given a two-letter English string, returns its jongseong code.\n\t// Assume e is a two-letter English string.\n\tvar _codeForEnglish = function _codeForEnglish(e) {\n\t  return (/ck/i.test(e) ? 1 : /.n/i.test(e) ? 4 : /ne/i.test(e) ? 4 : /.l/i.test(e) ? 8 : /le/i.test(e) ? 8 : /.m/i.test(e) ? 16 : /ob/i.test(e) ? 17 : /.p/i.test(e) ? 17 : /et/i.test(e) ? 19 : /ng/i.test(e) ? 21 : /* else      */0\n\t  );\n\t};\n\t\n\t// _codeForEnglishInitial :: string -> JongseongCode\n\t// Given an English letter, returns its jongseong code.\n\t// Assume e is a single-letter English string.\n\tvar _codeForEnglishInitial = function _codeForEnglishInitial(e) {\n\t  switch (e.toLowerCase()) {\n\t    case 'l':\n\t    case 'r':\n\t      return 8;\n\t    case 'm':\n\t      return 16;\n\t    case 'n':\n\t      return 4;\n\t    default:\n\t      return 0;\n\t  }\n\t};\n\t\n\t// code :: string -> JongseongCode\n\t// Computes the jongseong code of a given string.\n\t// If there isn't any recognizable letter in word, returns 0 (no jongseong).\n\tvar code = function code(word) {\n\t  if (!word) {\n\t    return 0;\n\t  }\n\t\n\t  // !!! Ignore letters inside parentheses.\n\t  var w = word.replace(/\\([^)]*\\)$/, '');\n\t  var last = w[w.length - 1];\n\t\n\t  if (/[가-힣]/.test(last)) {\n\t    return _codeForHangul(last);\n\t  }\n\t\n\t  if (/[1-9]0+$/.test(w)) {\n\t    var zerosMatch = /0+$/.exec(w);\n\t\n\t    return _codeForZeros(zerosMatch[0]);\n\t  }\n\t\n\t  if (/\\d/.test(last)) {\n\t    return _codeForDigit(last);\n\t  }\n\t\n\t  if (/[a-z]{2}$/i.test(w)) {\n\t    return _codeForEnglish(w.slice(w.length - 2, w.length));\n\t  }\n\t\n\t  if (/(?:^|[^a-z])[a-z]$/i.test(w)) {\n\t    return _codeForEnglishInitial(last);\n\t  }\n\t\n\t  if (/(^|[^a-z])[a-z][^a-z]?$/i.test(w)) {\n\t    return _codeForEnglishInitial(w[w.length - 2]);\n\t  }\n\t\n\t  return code(w.slice(0, w.length - 1));\n\t};\n\t\n\t// hasJongseong :: string -> boolean\n\t// Does the last letter of a given word have a jongseong?\n\tvar hasJongseong = function hasJongseong(w) {\n\t  return code(w) !== 0;\n\t};\n\t\n\tmodule.exports = {\n\t  _codeForHangul: _codeForHangul,\n\t  _codeForZeros: _codeForZeros,\n\t  _codeForDigit: _codeForDigit,\n\t  _codeForEnglish: _codeForEnglish,\n\t  _codeForEnglishInitial: _codeForEnglishInitial,\n\t  code: code,\n\t  hasJongseong: hasJongseong\n\t};\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// index.umd.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7deaf8f2a81962280474","// A JongseongCode is an integer[0...27].\n//   - Each code represents a tail consonants.\n//     code  |  e.g.\n//    -------+------\n//       0   |   가\n//       1   |   각\n//       2   |   갂\n//       3   |   갃\n//       4   |   간\n//       5   |   갅\n//       6   |   갆\n//       7   |   갇\n//       8   |   갈\n//       9   |   갉\n//      10   |   갊\n//      11   |   갋\n//      12   |   갌\n//      13   |   갍\n//      14   |   갎\n//      15   |   갏\n//      16   |   감\n//      17   |   갑\n//      18   |   값\n//      19   |   갓\n//      20   |   갔\n//      21   |   강\n//      22   |   갖\n//      23   |   갗\n//      24   |   갘\n//      25   |   같\n//      26   |   갚\n//      27   |   갛\n\n// _codeForHangul :: string -> JongseongCode\n// Given a Hangul letter, computes its jongseong code.\n// Assume h is a single letter Hangul string (가-힣).\n//   - 44032 (AC00) is the code point of 가, which is the first Hangul letter.\n//   - 28 = the number of the jongseongs + 1\nconst _codeForHangul = h =>\n  (h.charCodeAt(0) - 44032) % 28\n\n// code :: string -> JongseongCode\n// Given a string of zeros, returns its jongseong code.\n// e.g. _codeForZeros('00') === 1    (100 = 백)\n//   the number |\n//   of zeros   |\n//   -----------+-------\n//       1      |  십\n//       2      |  백\n//       3      |  천\n//     4 ~ 7    |  만\n//     8 ~ 11   |  억\n//    12 ~ 15   |  조\n//    16 ~ 19   |  경\n//    20 ~ 23   |  해\nconst _codeForZeros = zs => {\n  const n = zs.length\n\n  if (n === 1) {\n    return 17\n  }\n  if (n === 2 || (n >= 8 && n <= 11)) {\n    return 1\n  }\n  if (n >= 3 && n <= 7) {\n    return 4\n  }\n  if ((n >= 12 && n <= 15) || (n >= 20 && n <= 23)) {\n    return 0\n  }\n  if (n >= 16 && n <= 19) {\n    return 21\n  }\n\n  throw new Error(\"It's too large.\")\n}\n\n// _codeForDigit :: string -> JongseongCode\n// Given a digit, returns its jongseong code.\n// Assume d is one of: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'\nconst _codeForDigit = d =>\n  [21, 8, 0, 16, 0, 0, 1, 8, 8, 0][d]\n\n// _codeForEnglish :: string -> JongseongCode\n// Given a two-letter English string, returns its jongseong code.\n// Assume e is a two-letter English string.\nconst _codeForEnglish = e =>\n    /ck/i.test(e) ? 1\n  : /.n/i.test(e) ? 4\n  : /ne/i.test(e) ? 4\n  : /.l/i.test(e) ? 8\n  : /le/i.test(e) ? 8\n  : /.m/i.test(e) ? 16\n  : /ob/i.test(e) ? 17\n  : /.p/i.test(e) ? 17\n  : /et/i.test(e) ? 19\n  : /ng/i.test(e) ? 21\n  : /* else      */ 0\n\n// _codeForEnglishInitial :: string -> JongseongCode\n// Given an English letter, returns its jongseong code.\n// Assume e is a single-letter English string.\nconst _codeForEnglishInitial = e => {\n  switch (e.toLowerCase()) {\n    case 'l':\n    case 'r':\n      return 8\n    case 'm':\n      return 16\n    case 'n':\n      return 4\n    default:\n      return 0\n  }\n}\n\n// code :: string -> JongseongCode\n// Computes the jongseong code of a given string.\n// If there isn't any recognizable letter in word, returns 0 (no jongseong).\nconst code = word => {\n  if (!word) {\n    return 0\n  }\n\n  // !!! Ignore letters inside parentheses.\n  const w = word.replace(/\\([^)]*\\)$/, '')\n  const last = w[w.length - 1]\n\n  if (/[가-힣]/.test(last)) {\n    return _codeForHangul(last)\n  }\n\n  if (/[1-9]0+$/.test(w)) {\n    const zerosMatch = /0+$/.exec(w)\n\n    return _codeForZeros(zerosMatch[0])\n  }\n\n  if (/\\d/.test(last)) {\n    return _codeForDigit(last)\n  }\n\n  if (/[a-z]{2}$/i.test(w)) {\n    return _codeForEnglish(w.slice(w.length - 2, w.length))\n  }\n\n  if (/(?:^|[^a-z])[a-z]$/i.test(w)) {\n    return _codeForEnglishInitial(last)\n  }\n\n  if (/(^|[^a-z])[a-z][^a-z]?$/i.test(w)) {\n    return _codeForEnglishInitial(w[w.length - 2])\n  }\n\n  return code(w.slice(0, w.length - 1))\n}\n\n// hasJongseong :: string -> boolean\n// Does the last letter of a given word have a jongseong?\nconst hasJongseong = w =>\n  code(w) !== 0\n\nmodule.exports = {\n  _codeForHangul,\n  _codeForZeros,\n  _codeForDigit,\n  _codeForEnglish,\n  _codeForEnglishInitial,\n  code,\n  hasJongseong\n}\n\n\n\n// WEBPACK FOOTER //\n// ./index.js"],"sourceRoot":""}